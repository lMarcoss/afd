/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package afd;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author lmarcoss
 */
public class Ventana extends javax.swing.JFrame {

    int maximoAlfabetos = 4;
    int[] edosFinales = new int[10];
    int[][] transiciones = new int[10][maximoAlfabetos];
    int numeroAlfabetos;
    String[] alfabetos = new String[maximoAlfabetos];
    int numeroEstadosFinales;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        this.tablaTransiciones.setEnabled(false);
        this.AFD.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        afdPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        alfabeto = new javax.swing.JTextField();
        estados = new javax.swing.JComboBox<>();
        estadoInicial = new javax.swing.JComboBox<>();
        estadosFinales = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tablaTransiciones = new javax.swing.JButton();
        AFD = new javax.swing.JButton();
        grafo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AFD");
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        jLabel1.setText("Estados");

        jLabel2.setText("Alfabeto");

        jLabel3.setText("Estado inicial");

        alfabeto.setText("abcd");
        alfabeto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alfabetoMouseClicked(evt);
            }
        });
        alfabeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfabetoActionPerformed(evt);
            }
        });
        alfabeto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                alfabetoKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alfabetoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                alfabetoKeyReleased(evt);
            }
        });

        estados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        estados.setToolTipText("");
        estados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadosItemStateChanged(evt);
            }
        });
        estados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadosActionPerformed(evt);
            }
        });

        estadoInicial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1" }));
        estadoInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                estadoInicialMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                estadoInicialMouseClicked(evt);
            }
        });

        estadosFinales.setText("Insertar");
        estadosFinales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                estadosFinalesMouseClicked(evt);
            }
        });

        jLabel4.setText("Estados finales");

        tablaTransiciones.setText("Tabla de transiciones");
        tablaTransiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablaTransicionesActionPerformed(evt);
            }
        });

        AFD.setText("Dibujar AFD");
        AFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AFDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout afdPanelLayout = new javax.swing.GroupLayout(afdPanel);
        afdPanel.setLayout(afdPanelLayout);
        afdPanelLayout.setHorizontalGroup(
            afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afdPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(40, 40, 40)
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(estados, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(estadoInicial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(64, 64, 64)
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(alfabeto)
                    .addComponent(estadosFinales, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablaTransiciones, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AFD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );
        afdPanelLayout.setVerticalGroup(
            afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afdPanelLayout.createSequentialGroup()
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(afdPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(alfabeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(estados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, afdPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tablaTransiciones)))
                .addGap(15, 15, 15)
                .addGroup(afdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(estadoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(estadosFinales)
                    .addComponent(jLabel4)
                    .addComponent(AFD))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout grafoLayout = new javax.swing.GroupLayout(grafo);
        grafo.setLayout(grafoLayout);
        grafoLayout.setHorizontalGroup(
            grafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        grafoLayout.setVerticalGroup(
            grafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 315, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(afdPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(grafo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(afdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void alfabetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfabetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alfabetoActionPerformed

    private void estadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadosActionPerformed
        // Rellenar el comboBox de estados finales

    }//GEN-LAST:event_estadosActionPerformed

    private void estadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadosItemStateChanged

    }//GEN-LAST:event_estadosItemStateChanged

    private void alfabetoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alfabetoKeyTyped

        int longitud = this.alfabeto.getText().length();

        if (longitud == 4) {
            evt.consume();
        } else {
            // Cadena alfanumerica
            char c = evt.getKeyChar();
            if (!Character.isAlphabetic(c) && !Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
                getToolkit().beep();

                evt.consume();
                JOptionPane.showMessageDialog(this.rootPane, "Sólo alfanumérico [A-Za-z0-9]", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

    }//GEN-LAST:event_alfabetoKeyTyped

    private void estadosFinalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_estadosFinalesMouseClicked
        try {
            do {
                numeroEstadosFinales = Integer.parseInt(JOptionPane.showInputDialog(null, "Escriba el número de estados finales para el AFD (1-" + Integer.valueOf(this.estados.getSelectedItem().toString()) + "): "));
            } while (numeroEstadosFinales > Integer.valueOf(this.estados.getSelectedItem().toString()) || numeroEstadosFinales <= 0);
            try {
                edosFinales = leerEstadosFinales(numeroEstadosFinales, Integer.valueOf(this.estados.getSelectedItem().toString()));
                this.tablaTransiciones.setEnabled(true);
            } catch (NumberFormatException e) {
            }
        } catch (HeadlessException | NumberFormatException e) {
        }


    }//GEN-LAST:event_estadosFinalesMouseClicked

    private void tablaTransicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablaTransicionesActionPerformed
        // TODO add your handling code here:
        this.alfabeto.setText(this.alfabeto.getText().trim());
        if (!alfabeto.getText().equals("")) {
            alfabetos = extraerAlfabetos(this.alfabeto.getText(), maximoAlfabetos); //alfabetos en un vector
            numeroAlfabetos = this.alfabeto.getText().length();
            transiciones = leerTransiciones(alfabetos, Integer.valueOf(this.estados.getSelectedItem().toString()), numeroAlfabetos);

            if (transiciones[0][0] == 99) {
                try {
                    JOptionPane.showMessageDialog(this.rootPane, "No es Autómata finito deterministico! intenta con otro", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (HeadlessException e) {
                }
                this.tablaTransiciones.setEnabled(false);
                this.AFD.setEnabled(false);
            } else {
                this.AFD.setEnabled(true);
            }

        }

    }//GEN-LAST:event_tablaTransicionesActionPerformed

    private void AFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AFDActionPerformed
        if (esAFD(numeroAlfabetos, Integer.valueOf(this.estados.getSelectedItem().toString()), edosFinales, numeroEstadosFinales, 1, transiciones)) {
            JOptionPane.showMessageDialog(this.rootPane, "Es un AFD", "Es AFD", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this.rootPane, "No es Autómata finito deterministico! intenta con otro", "Error", JOptionPane.ERROR_MESSAGE);
            this.alfabeto.setEditable(true);
        }
    }//GEN-LAST:event_AFDActionPerformed

    private void alfabetoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alfabetoKeyPressed

    }//GEN-LAST:event_alfabetoKeyPressed

    private void alfabetoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alfabetoMouseClicked

    }//GEN-LAST:event_alfabetoMouseClicked

    private void alfabetoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alfabetoKeyReleased
        if (this.alfabeto.getText().equals("")) {
            this.estadosFinales.setEnabled(false);
            this.tablaTransiciones.setEnabled(false);
        } else {
            this.estadosFinales.setEnabled(true);
        }
    }//GEN-LAST:event_alfabetoKeyReleased

    private void estadoInicialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_estadoInicialMouseClicked
//        JOptionPane.showMessageDialog(this.rootPane, "El estado inicial siempre es 1", "Mensage", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_estadoInicialMouseClicked

    private void estadoInicialMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_estadoInicialMousePressed
        JOptionPane.showMessageDialog(this.rootPane, "El estado inicial siempre es 1", "Mensage", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_estadoInicialMousePressed

    private static boolean esAFD(int numeroAlfabetos, int numeroEstados, int[] estadosFinales, int numeroEstadosFinales, int estadoInicial, int[][] transiciones) {
        // Ha pasado todas las pruebas anteriores
        if (numeroEstados == 1) {
            // es AFD automáticamente
            return true;
        } else {
            // Los estados transicionan a otro estado excepto los finales que pueden transicionarse
            return TransicionConOtroEstado(transiciones, numeroAlfabetos, numeroEstados, estadosFinales, numeroEstadosFinales);
        }
    }

    private static boolean TransicionConOtroEstado(int[][] transiciones, int numeroAlfabetos, int numeroEstados, int[] estadosFinales, int numeroEstadosFinales) {
        // Debe haber al menos una transición con un alfabeto que nos lleve a otro estado: 
        // excepto cuando es estado final
        boolean transicionAOtroEdo = false;

        for (int estado = 0; estado < numeroEstados; estado++) {
            transicionAOtroEdo = false;
            for (int alfabeto = 0; alfabeto < numeroAlfabetos; alfabeto++) {
                if (!esEstadoFinal((estado + 1), estadosFinales, numeroEstadosFinales)) { // no es estado final
                    if (transiciones[estado][alfabeto] != (estado + 1)) {
                        // Con al menos una transición a otro estado se termina para cada estado
                        transicionAOtroEdo = true;
                        break;
                    }
                } else {
                    transicionAOtroEdo = true;
                }
            }
        }
        return transicionAOtroEdo;
    }

    private static boolean esEstadoFinal(int estado, int[] estadosFinales, int numeroEstadosFinales) {
        boolean esEstadoFinal = false;
        for (int edoFinal = 0; edoFinal < numeroEstadosFinales; edoFinal++) {
            // Si encuentra una coincidencia es final automáticamente
            if (estadosFinales[edoFinal] == estado) {
                esEstadoFinal = true;
                break;// termina el ciclos
            }
        }
        return esEstadoFinal;
    }

    private static String[] extraerAlfabetos(String alfabeto, int maximoAlfabetos) {
        //extraer los alfabetos
        String[] alfabetos = new String[maximoAlfabetos];
        for (int letra = 0; letra < alfabeto.length(); letra++) {
            alfabetos[letra] = String.valueOf(alfabeto.charAt(letra));
        }
        return alfabetos;
    }

    private static int[][] leerTransiciones(String[] alfabetos, int numeroEstados, int numeroAlfabetos) {
        System.out.println(numeroEstados);
        System.out.println(numeroAlfabetos);
        int[][] transiciones = new int[numeroEstados][numeroAlfabetos];
        int estado;
        boolean salir = false;
        for (int fila = 0; fila < numeroEstados; fila++) {
            estado = fila + 1;
            for (int columna = 0; columna < numeroAlfabetos; columna++) {
                do {
                    try {
                        transiciones[fila][columna] = Integer.parseInt(JOptionPane.showInputDialog(null, "El estado " + estado + " con \"" + alfabetos[columna] + "\" transiciona al estado (1-" + numeroEstados + ")? (99 = no hay transición\n con \"" + alfabetos[columna] + "\" o transición al vacío): "));
                    } catch (HeadlessException | NumberFormatException e) {
                    }
                } while ((transiciones[fila][columna] > numeroEstados || transiciones[fila][columna] <= 0) && (transiciones[fila][columna] != 99));
                if (transiciones[fila][columna] == 99) {
                    salir = true;
                    break;
                }
            }
            if (salir) {
                transiciones[0][0] = 99;
                break; // se termina la lectura
            }
            //Verificamos si hay transiciones adicionales
            int edoAdicional;
            do {
                edoAdicional = Integer.parseInt(JOptionPane.showInputDialog(null, "El estado " + estado + " tiene más estados a la que transiciona? (1 = si, 0 = No): "));
            } while (edoAdicional != 1 && edoAdicional != 0);
            if (edoAdicional == 1) {
                transiciones[0][0] = 99;
                break; // se termina la lectura
            }
        }
        return transiciones;
    }

    private static int[] leerEstadosFinales(int numeroEstadosFinales, int numeroEstados) {
        int[] estadosFinales = new int[numeroEstadosFinales];
        int contador;
        boolean diferente;
        for (int estado = 0; estado < numeroEstadosFinales; estado++) {
            do {
                estadosFinales[estado] = Integer.parseInt(JOptionPane.showInputDialog(null, "Escriba el estado final " + (estado + 1) + " (1-" + numeroEstados + "): "));
                // Verificamos que los estados finales estén completas
                contador = 0;
                diferente = true;
                while (contador < estado && diferente == true) {
                    if (estadosFinales[estado] == estadosFinales[contador]) {
                        diferente = false;
                    }
                    contador++;
                }
            } while (!diferente || estadosFinales[estado] > numeroEstados || estadosFinales[estado] <= 0);
        }
        return estadosFinales;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Ventana().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AFD;
    private javax.swing.JPanel afdPanel;
    private javax.swing.JTextField alfabeto;
    private javax.swing.JComboBox<String> estadoInicial;
    private javax.swing.JComboBox<String> estados;
    private javax.swing.JButton estadosFinales;
    private javax.swing.JPanel grafo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton tablaTransiciones;
    // End of variables declaration//GEN-END:variables

}
